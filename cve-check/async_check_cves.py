import csv
import json

import asyncio
import aiohttp

from bs4 import BeautifulSoup

CONCURRENCY_LIMIT = 50
semaphore = asyncio.Semaphore(CONCURRENCY_LIMIT)

BASE_URL = "https://ubuntu.com/security/"

async def get_cveinfo(session, cve: str):
    url = f"{BASE_URL}{cve}"
    async with semaphore:
        try:
            async with session.get(url, timeout=300) as response:
                html = await response.text()
                print(f"{cve}: {response.status}")
                return parse_rsp(html, cve, response.status)
        except Exception as e:
            print(f"{cve}: error {e}")
            return {cve: {"pkg": "-", "cve": cve, "status": "error"}}

    # async with aiohttp.ClientSession() as session:
    #     async with session.get(f"{BASE_URL}{cve}") as response:
    #         rsp = await response


def parse_rsp(html, cve, status):
    dc_list = {}
    if status != 200:
        print(f"{cve}: {status}")
        dc_list[cve] = {"pkg": "-", "cve": cve, "status": "not available"}
        return dc_list

    soup = BeautifulSoup(html, "html.parser")
    table = soup.find(
        "table", {"class": "cve-table u-cve-table-horizontal-scroll__table"}
    )

    cur_name = ""
    for idx, tr in enumerate(table.find_all("tr")):
        cells = [td.get_text(strip=True) for td in tr.find_all(["td", "th"])]
        if idx == 0:
            continue
        if len(cells) == 3:
            cur_name = cells[0].strip()
            cells = [
                cur_name,
                cells[1][:5],
                cells[1][5:].strip(),
                cells[2].strip(),
            ]
        else:
            cells = [
                cur_name,
                cells[0][:5],
                cells[0][5:].strip(),
                cells[1].strip(),
            ]
        dc_entry = {
            "pkg": cells[0],
            "cve": cve,
            "status": {cells[1]: cells[3]},
        }

        # update the dc_list
        if cve in dc_list:
            dc_list[cve]["status"].update(dc_entry["status"])
        else:
            dc_list[cve] = dc_entry
    return dc_list


async def main():
    fname = ""

    with open(fname) as csvfile:
        reader = csv.DictReader(csvfile)
        ll = list(reader)

    # for entry in ll:
    #     print(f"{entry['PackageBD']}: {entry['CVEsBD']}")

    tasks = []
    async with aiohttp.ClientSession() as session:
        for entry in ll:
            for cve in entry["CVEsBD"].split(";"):
                tasks.append(get_cveinfo(session, cve.strip()))
                # dc_list.update(get_cveinfo(cve.strip()))

        results = await asyncio.gather(*tasks)

    dc_list = {}
    for r in results:
        dc_list.update(r)

    with open("cve_list.json", "w", encoding="utf-8") as ofile:
        json.dump(dc_list, ofile, indent=2)


if __name__ == "__main__":
    # Run the main function
    asyncio.run(main())
